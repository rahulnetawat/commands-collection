1. # Docker exec command that can be used to connect to a container that is already running.
	$ docker exec -it 16b1e633aa96 /bin/bash

2. # Command to start docker container.
	$ docker container start <container-id>

3. # List current running docker containers.
	$ docker container ls

4. # Run container in detach mode.
	$ docker container run -d -it ubuntu /bin/bash

5. # Command to start/stop all containers from CONTAINER-ID.
	$ docker container start|stop $(docker container ls -qa)

=====================================================================================================================
############################
##	PORT MAPPING	  ##
############################
6. # Here we host the container web server via port mapping.(This is just an example for Web Server Port Mapping)
        $ docker container run -d -p 3600:80 nginx

7. # Specify Name to container.
        $ docker container run -d -p 3600:80 --name my_web_server nginx

8. # To verify that port is start listening run below command.
        $ netstat -tnlp |grep 3600

############################
##      PORT MAPPING      ##
############################
=====================================================================================================================
9. # Enter into running container with command argument.
        $ docker container exec -it <CONTAINER-ID> <CMD>
cmd ex: $ docker container exec -it 7d459c377556 /bin/bash

10. # Rename the running Container.
        $ docker container rename <CONTAINER-ID> <DESIRED-NAME>
cmd ex: $ docker container rename 7d459c377556 tiger-web

11. # Restart Docker container.
	$ docker container restart <CONTAINER-ID>
cmd ex:	$ docker container restart 7d459c377556

12. # Restart multiple docker container.
	$ docker container restart <CONTAINER-ID-1> <CONTAINER-ID-2>
cmd ex:	$ docker container restart 7d459c377556 08731adf0c00

13. # Kill running container.
	$ docker container kill <CONTAINER-ID>

14. # Wait for attached container while exit status.
	$ docker container wait <CONTAINER-ID>

15. # Pause the running docker container.
	$ docker container pause <CONTAINER-ID>

16. # Unpause/Resume the running docker container from pause status.
	$ docker container unpause <CONTAINER-ID>

17. # Delete the unused stopped containers.
	$ docker container prune (Asking for y/N while we run this command)
	$ docker container prune -f (Forcefully delete all containers, without asking y/N)

18. # To check running port for container.
    # We can check with CONTAINER-ID or with NAMES. 
    # IF we MAP any Port from Docker Engine.

	$ docker container port <CONTAINER-ID>/<NAME>

19. # Command to create only Docker container.
	$ docker container create nginx sleep 60
In above command we only create a container of Nginx which is only be created, and the container is not in running state.

20. # To check recent changes in container.
	$ docker container diff <CONTAINER-ID>

21. # Copy file/folder in docker container from local machine. 
	$ docker container cp <file/folder> <container-id>:/<destination-dir>
cmd ex:	$ docker container cp disk-check.py 86a51d3a65f7:/tmp

22. # Export running docker container.
	$ docker container export <container-id> > my-exported-container-name.tar
	OR
	$ docker container export <container-id> -o my-exported-container-name.tar

cmd ex:	$ docker container export 0032cf82d15a > my_ubuntu.tar
	$ docker container export 0032cf82d15a -o my_ubuntu.tar

23. # Import Image in docker.
	$ docker image import <my-custom-image.tar> <CONTAINER-NAME>
cmd ex:	$ docker image import my_ubuntu.tar import-test

24. # Create image from running docker using commit command.
	$ docker container commit --author <NAME-OF-AUTHOR> -m <TYPE-YOUR-MESSAGE> <CONTAINER-ID> <NEW-IMAGE-NAME>
cmd ex:	$ docker container commit --author "Rahul Netawat" -m "this is a first test commit" 02455780425c my-test-image

25. # Pulling image from https://hub.docker.com with TAG/Version.
	$ docker pull image-name:image-version/tag
cmd ex:	$ docker pull ubuntu:14.04

26. # Tag a Docker image.
	$ docker image tag <IMAGE-NAME> <NEW-IMAGE-TAG-NAME>
cmd ex:	$ docker image tag my-test-image rahulnetawat-my-test-image	

==================================================================================
If you face docker login issue on ubuntu install below packages.
#################################################################################
Error: Error saving credentials: error storing credentials - err: exit status 1,
out: `No such interface 'org.freedesktop.Secret.Collection'
on object at path /org/freedesktop/secrets/collection/login`
#################################################################################
sudo apt install gnupg2 pass
==================================================================================

27. # Login Docker via command line to Push images to hub.docker.com
	$ docker login
Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.
Username: XXXXXXXXXX
Password: **********

28. # Push 
	$ docker push rahulnetawat/my-image-name